buildscript {
	ext {
		springBootVersion = "1.3.5.RELEASE"
		commonRestVersion = "2.0-om.4"
	}
	repositories {
		jcenter()
		maven {
			url "https://dl.bintray.com/openmastery/maven"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.bancvue:gradle-core:1.4-om.0"
		classpath "net.jokubasdargis.buildtimer:gradle-plugin:0.1.1"
	}
}

plugins {
	id 'org.detoeuf.swagger-codegen' version '1.6.3'
}

apply plugin: "com.bancvue.core-oss"
apply plugin: "com.bancvue.maven-publish-ext"
apply plugin: "spring-boot"
apply plugin: "net.jokubasdargis.build-timer"

repositories {
	mavenLocal()
	jcenter()
	maven {
		url "https://dl.bintray.com/openmastery/maven"
	}
}

configurations {
	client
	doclet {
		extendsFrom compile
	}
}

sourceSets {
	client {
		java {
			srcDir "src/main/java"
			include "org/openmastery/rest/**"
			include "org/openmastery/publisher/api/**"
			include "org/openmastery/publisher/client/**"
			include "org/openmastery/storyweb/api/**"
			include "org/openmastery/storyweb/client/**"
		}
	}
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-starter-jersey"
	compile "org.codehaus.groovy:groovy-all:2.4.3"
	compile "com.bancvue:common-rest:${commonRestVersion}"
	compile 'joda-time:joda-time:2.9.4'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.7.5'

	compile("net.sf.dozer:dozer:5.5.1") {
		exclude group: "org.slf4j"
	}

	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile "postgresql:postgresql:9.0-801.jdbc4"
	compile "org.liquibase:liquibase-core"

	// Utilities
	compile "com.google.guava:guava:18.0"
	compile "org.projectlombok:lombok:1.16.4"

	clientCompile "com.bancvue:common-rest-client:${commonRestVersion}"
	clientCompile "org.projectlombok:lombok:1.16.4"

	mainTestCompile 'com.thedeanda:lorem:2.0'
	mainTestCompile "org.fluttercode.datafactory:datafactory:0.8"
	mainTestCompile("org.spockframework:spock-spring:1.0-groovy-2.4") {
		exclude group: "org.codehaus.groovy"
	}

	testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile "commons-io:commons-io:2.4"
	testCompile "cglib:cglib-nodep:3.2.0"

	doclet 'com.tenxerconsulting:swagger-doclet:1.1.3'
	doclet 'javax.ws.rs:javax.ws.rs-api:2.0'
}

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs += ["src/main/java"]

compileClientJava {
	sourceCompatibility = 1.6
	targetCompatibility = 1.6
}

publishing_ext {
	publication('client')
}

license {
	sourceSets = sourceSets.matching { it.name == "main" }
	excludes(["**/*.properties", "**/*.xml", "db/**", "licenses/**", "static/**"])
	excludes(["org/openmastery/rest/**", "org/openmastery/publisher/api/**", "org/openmastery/publisher/client/**",
	          "org/openmastery/storyweb/api/**", "org/openmastery/storyweb/client/**"])
}

task pullPostgres(type: Exec) {
	commandLine "docker pull postgres:9.5.5".split(/\s+/)
}

task removePostgres(type: Exec) {
	commandLine "docker rm -f postgres".split(/\s+/)
	ignoreExitValue true
}

task createPostgres(type: Exec) {
	commandLine 'docker create --name=postgres --publish=5432:5432 --env="POSTGRES_USER=postgres" --env="POSTGRES_PASSWORD=postgres" postgres:9.5.5'.split(/\s+/)
	mustRunAfter pullPostgres, removePostgres
}

task startPostgres(type: Exec) {
	commandLine "docker start postgres".split(/\s+/)
	mustRunAfter createPostgres
}

task waitForPostgresInitialization(dependsOn: startPostgres) << {
	Thread.sleep(5000)
}

task createApplicationDatabase(type: Exec, dependsOn: waitForPostgresInitialization) {
	commandLine 'docker', 'exec', 'postgres', 'createdb', '-U', 'postgres', "ideaflow"
	// subsequent creates will result in failure
	ignoreExitValue true
}

task createTestDatabase(type: Exec, dependsOn: waitForPostgresInitialization) {
	commandLine 'docker', 'exec', 'postgres', 'createdb', '-U', 'postgres', "ideaflow-test"
	// subsequent creates will result in failure
	ignoreExitValue true
}


task refreshPostgres(dependsOn: [removePostgres, createPostgres, startPostgres, createApplicationDatabase, createTestDatabase])

task setSkipTestsTrue << {
	project.ext.skipTests = true
}
test.onlyIf { project.hasProperty("skipTests") == false }
test.mustRunAfter setSkipTestsTrue
componentTest.onlyIf { project.hasProperty("skipTests") == false }
componentTest.mustRunAfter setSkipTestsTrue

task stage {
	dependsOn setSkipTestsTrue, build
}

task generateRestApiDocs(type: Javadoc, dependsOn: [compileJava, compileGroovy]) {
	source = sourceSets.main.allJava
	destinationDir = file('build/resources/main/static/api-json')
	options.classpath = configurations.doclet.files.asType(List) + sourceSets.main.output.files.asType(List)
	options.docletpath = configurations.doclet.files.asType(List) + sourceSets.main.output.files.asType(List)
	options.doclet = "com.tenxerconsulting.swagger.doclet.ServiceDoclet"
	options.addStringOption("apiVersion", "1")
	options.addStringOption("docBasePath", "/s/api-json")
	options.addStringOption("apiBasePath", "/")
	options.addBooleanOption("skipUiFiles", true)
	options.addStringOption("stringTypePrefixes", "java.net.URI")
}

processResources.dependsOn(generateRestApiDocs)
